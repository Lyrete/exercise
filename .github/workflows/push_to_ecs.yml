name: Deploy to ECS

on:
  push:
    # paths:
    #   - client/**
    #   - server/**
    #   - shared/**
    #   - Dockerfile
    branches:
      - master

env:
  AWS_REGION: ${{vars.AWS_REGION}}
  ECR_REPOSITORY: ${{vars.ECR_REPO}} # set this to your Amazon ECR repository name
  ECS_SERVICE: ${{vars.ECS_SERVICE}}
  ECS_CLUSTER: ${{vars.AWS_ECS_CLUSTER}} # set this to your Amazon ECS cluster name
  CONTAINER_NAME: service # set this to the name of the container in the

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  check-if-need-rebuild:
    name: Check if rebuild required
    runs-on: ubuntu-latest
    outputs:
      need-rebuild: ${{ steps.filter.outputs.sourcefiles }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            sourcefiles:
              - 'client/**'
              - 'server/**'
              - 'shared/**'
              - 'Dockerfile'

      - name: Sourcefiles changed
        if: steps.filter.outputs.sourcefiles == 'true'
        run: echo "Sourcefiles changed"

      - name: No sourcefiles changed
        if: steps.filter.outputs.sourcefiles != 'true'
        run: echo "No changes to sourcefiles"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    needs: check-if-need-rebuild

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{vars.ROLE}}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        id: build-push
        if: needs.check-if-need-rebuild.outputs.need-rebuild == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get latest image
        id: get-image
        if: needs.check-if-need-rebuild.outputs.need-rebuild != 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          latest_image_tag=$(aws ecr describe-images \
            --repository-name $ECR_REPOSITORY \
            --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
            --output text)
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$latest_image_tag" >> $GITHUB_OUTPUT

      - name: Get last task definition
        id: task-definition-get
        run: |
          echo "latest_task_def_arn=$(aws ecs list-task-definitions \
            --family-prefix hedgehog-task \
            --sort DESC \
            --query "taskDefinitionArns[0]" \
            --output text)" >> $GITHUB_OUTPUT

      - name: Render Amazon ECS task definition
        id: render-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-arn: ${{ steps.task-definition-get.outputs.latest_task_def_arn }}
          container-name: web
          image: ${{ steps.build-push.outputs.image || steps.get-image.outputs.image }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          service: ${{env.ECS_SERVICE}}
          cluster: ${{env.ECS_CLUSTER}}
